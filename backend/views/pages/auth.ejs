<!-- backend\views\auth.ejs -->


<!-- Содержимое страницы входа и регистрации -->
<div class="content">
    <div class="content_side__left"></div>
    <div class="content_center">
        <h2>Вход и Регистрация</h2>

        <% if (error) { %> <!-- Выводим ошибку, переданную из server.js -->
        <p style="color: red;">Ошибка: <%= error %></p>
        <% } %>

        <div class="auth-forms-container">
            <!-- Форма входа -->
            <div id="login-form-container">
                <h3>Вход</h3>
                <form id="login-form">
                    <label class="input-container">
                        <span>Имя пользователя:</span>
                        <input type="text" id="login-username" required>
                    </label>
                    <label class="input-container">
                        <span>Пароль:</span>
                        <input type="password" id="login-password" required>
                    </label>
                    <button type="submit">Войти</button>
                    <div id="login-errors" class="errors-display"></div> <!-- Для вывода ошибок -->
                </form>
                <p>Нет аккаунта? <a href="#" id="show-register-link">Зарегистрироваться</a></p>
            </div>

            <!-- Форма регистрации (скрыта по умолчанию) -->
            <div id="register-form-container" style="display: none;">
                <h3>Регистрация</h3>
                <form id="register-form">
                    <label class="input-container">
                        <span>Имя пользователя:</span>
                        <input type="text" id="register-username" required>
                    </label>
                    <label class="input-container">
                        <span>Пароль:</span>
                        <input type="password" id="register-password" required>
                    </label>
                    <label class="input-container">
                        <span>Повторите пароль:</span>
                        <input type="password" id="register-password2" required>
                    </label>
                    <button type="submit">Зарегистрироваться</button>
                    <div id="register-errors" class="errors-display"></div> <!-- Для вывода ошибок -->
                </form>
                <p>Уже есть аккаунт? <a href="#" id="show-login-link">Войти</a></p>
            </div>
        </div>
    </div>
    <div class="content_side__right"></div>
</div>

<script>
    // JS для переключения форм и отправки данных
    const loginFormContainer = document.getElementById('login-form-container');
    const registerFormContainer = document.getElementById('register-form-container');
    const showRegisterLink = document.getElementById('show-register-link');
    const showLoginLink = document.getElementById('show-login-link');
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const loginErrorsDiv = document.getElementById('login-errors');
    const registerErrorsDiv = document.getElementById('register-errors');

    // Переключение форм
    showRegisterLink.addEventListener('click', (e) => {
        e.preventDefault();
        loginFormContainer.style.display = 'none';
        registerFormContainer.style.display = 'block';
        // Очищаем поля и ошибки при переключении
        loginForm.reset();
        loginErrorsDiv.innerHTML = '';
        registerErrorsDiv.innerHTML = '';
    });

    showLoginLink.addEventListener('click', (e) => {
        e.preventDefault();
        registerFormContainer.style.display = 'none';
        loginFormContainer.style.display = 'block';
        // Очищаем поля и ошибки при переключении
        registerForm.reset();
        loginErrorsDiv.innerHTML = '';
        registerErrorsDiv.innerHTML = '';
    });

    // Обработка отправки формы входа
    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        loginErrorsDiv.innerHTML = ''; // Очищаем предыдущие ошибки

        const username = document.getElementById('login-username').value;
        const password = document.getElementById('login-password').value;

        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, password }),
            });

            const result = await response.json();
            updateResponse({ status: response.status, statusText: response.statusText });

            if (response.ok) {
                // Успешный вход
                alert('Вход выполнен успешно!'); // Или другой способ уведомления
                window.location.href = '/admin'; // Перенаправляем на страницу админки или главную
            } else {
                // Ошибка входа (400, 401, 500)
                if (response.status === 400 && result.errors) {
                    // Ошибки валидации (если есть, хотя для логина меньше валидации)
                    let errorHtml = '<ul>';
                    result.errors.forEach(err => {
                        errorHtml += `<li>${err.msg}</li>`;
                    });
                    errorHtml += '</ul>';
                    loginErrorsDiv.innerHTML = `<div style="color: red;">${errorHtml}</div>`;
                } else {
                    // Ошибка от контроллера (например, "Неверный логин/пароль")
                    loginErrorsDiv.innerHTML = `<p style="color: red;">${result.error || response.statusText}</p>`;
                }
            }

        } catch (error) {
            console.error('Error logging in:', error);
            updateResponse(error);
            loginErrorsDiv.innerHTML = `<p style="color: red;">Произошла ошибка при входе.</p>`;
        }
    });

    // Обработка отправки формы регистрации
    registerForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        registerErrorsDiv.innerHTML = ''; // Очищаем предыдущие ошибки

        const username = document.getElementById('register-username').value;
        const password = document.getElementById('register-password').value;
        const password2 = document.getElementById('register-password2').value;

        if (password !== password2) {
            registerErrorsDiv.innerHTML = `<p style="color: red;">Пароли не совпадают!</p>`;
            return;
        }

        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, password }),
            });

            const result = await response.json();
            updateResponse({ status: response.status, statusText: response.statusText });

            if (response.ok) {
                // Успешная регистрация
                alert('Регистрация успешна! Теперь вы авторизованы.'); // Или другой способ уведомления
                // Если сервер авторизует пользователя сразу после регистрации, можно перенаправить
                window.location.href = '/admin'; // Перенаправляем на страницу админки или главную
            } else {
                // Ошибка регистрации (400 ValidationError, 409 Conflict, 500)
                if (response.status === 400 && result.errors) {
                    // Ошибки валидации (например, короткий пароль)
                    let errorHtml = '<ul>';
                    result.errors.forEach(err => {
                        errorHtml += `<li>${err.msg}</li>`;
                    });
                    errorHtml += '</ul>';
                    registerErrorsDiv.innerHTML = `<div style="color: red;">${errorHtml}</div>`;
                } else {
                    // Ошибка от контроллера (например, "Пользователь уже существует")
                    registerErrorsDiv.innerHTML = `<p style="color: red;">${result.error || response.statusText}</p>`;
                }
            }

        } catch (error) {
            console.error('Error registering:', error);
            updateResponse(error);
            registerErrorsDiv.innerHTML = `<p style="color: red;">Произошла ошибка при регистрации.</p>`;
        }
    });

</script>